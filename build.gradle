plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

java {
    withSourcesJar()
}

group = 'ru.n08i40k'
version = '1.4.1'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven { // orbit
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
    maven { // item-nbt-api
        name = "CodeMC"
        url = "https://repo.codemc.org/repository/maven-public/"
    }
    maven {
        name = "local"
        url = "file://\\C:\\Users\\n08i40k\\.m2\\repository"
    }
}

dependencies {
    // Paper API
    compileOnly "com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT"

    // Plugins
    compileOnly 'de.tr7zw:item-nbt-api-plugin:2.12.0'

    // LomBok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Libraries
    implementation "meteordevelopment:orbit:0.2.3"
    implementation "ru.n08i40k:npluginlocale:1.3"
}


shadowJar {
    ext.myRelocate = { String libPackage ->
        String toLib = libPackage

        if (libPackage.contains('.'))
            toLib = libPackage.split("\\.").last()

        toLib = "${project.group}.${project.name.toLowerCase()}.deps.${toLib}"

        print("relocating ${libPackage} to ${toLib}\n")
        relocate(libPackage, "${toLib}")
    }

    myRelocate("meteordevelopment")
    myRelocate("ru.n08i40k.npluginlocale")
}

jar {
    dependsOn = ['shadowJar']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = project.name.toLowerCase()
            version = version

            from components.java
        }
    }
}

def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
